#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from AuthServiceClient import AuthServiceClient
from AuthServiceClient.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  AuthKeyExchangeResponse AuthKeyExchangeRequest()'
  print '  AuthLoginResponse AuthLoginRequest()'
  print '  IdentityCredentialResponse IdentityCredentialRequest()'
  print '  RSAKey IdentityProvider()'
  print '  string AuthSessionRequest()'
  print '  void QRCodeLoggedInActivity(string verifier, ErrorCode errorCode, E2EEPublicKey publicKey)'
  print '  void respondE2EELoginRequest(string verifier, E2EEPublicKey publicKey, string encryptedKeyChain, string hashKeyChain, ErrorCode errorCode)'
  print '  void issueTokenForAccountMigrationSettings(bool enforce)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AuthServiceClient.Client(protocol)
transport.open()

if cmd == 'AuthKeyExchangeRequest':
  if len(args) != 0:
    print 'AuthKeyExchangeRequest requires 0 args'
    sys.exit(1)
  pp.pprint(client.AuthKeyExchangeRequest())

elif cmd == 'AuthLoginRequest':
  if len(args) != 0:
    print 'AuthLoginRequest requires 0 args'
    sys.exit(1)
  pp.pprint(client.AuthLoginRequest())

elif cmd == 'IdentityCredentialRequest':
  if len(args) != 0:
    print 'IdentityCredentialRequest requires 0 args'
    sys.exit(1)
  pp.pprint(client.IdentityCredentialRequest())

elif cmd == 'IdentityProvider':
  if len(args) != 0:
    print 'IdentityProvider requires 0 args'
    sys.exit(1)
  pp.pprint(client.IdentityProvider())

elif cmd == 'AuthSessionRequest':
  if len(args) != 0:
    print 'AuthSessionRequest requires 0 args'
    sys.exit(1)
  pp.pprint(client.AuthSessionRequest())

elif cmd == 'QRCodeLoggedInActivity':
  if len(args) != 3:
    print 'QRCodeLoggedInActivity requires 3 args'
    sys.exit(1)
  pp.pprint(client.QRCodeLoggedInActivity(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'respondE2EELoginRequest':
  if len(args) != 5:
    print 'respondE2EELoginRequest requires 5 args'
    sys.exit(1)
  pp.pprint(client.respondE2EELoginRequest(args[0],eval(args[1]),args[2],args[3],eval(args[4]),))

elif cmd == 'issueTokenForAccountMigrationSettings':
  if len(args) != 1:
    print 'issueTokenForAccountMigrationSettings requires 1 args'
    sys.exit(1)
  pp.pprint(client.issueTokenForAccountMigrationSettings(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
