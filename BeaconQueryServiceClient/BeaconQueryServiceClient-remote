#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from BeaconQueryServiceClient import BeaconQueryServiceClient
from BeaconQueryServiceClient.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  BeaconQueryResponse QueryBeaconActions( deprecated_actionUrls, i64 cacheTtl, BeaconTouchActions touchActions, BeaconLayerInfoAndActions layerInfoAndActions, BeaconBackgroundNotification backgroundEnteringNotification, BeaconBackgroundNotification backgroundLeavingNotification, string group, string major, string minor, double effectiveRange,  channelWhiteList, i64 actionId, i64 stayReportInterval, i64 leaveThresholdTime, double touchThreshold, i16 cutoffThreshold)')
    print('  void NotifyBannerTapped(string hwid, string secureMessage, i32 applicationType, string applicationVersion, string userSessionId, i64 actionId, string screen, i64 bannerTappedAt, bool bannerTermAgreed)')
    print('  void NotifyBannerShowing(string hwid, string secureMessage, i32 applicationType, string applicationVersion, string userSessionId, i64 actionId, string screen, i64 bannerStartedAt, i64 bannerShownFor)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = BeaconQueryServiceClient.Client(protocol)
transport.open()

if cmd == 'QueryBeaconActions':
    if len(args) != 16:
        print('QueryBeaconActions requires 16 args')
        sys.exit(1)
    pp.pprint(client.QueryBeaconActions(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), args[6], args[7], args[8], eval(args[9]), eval(args[10]), eval(args[11]), eval(args[12]), eval(args[13]), eval(args[14]), eval(args[15]),))

elif cmd == 'NotifyBannerTapped':
    if len(args) != 9:
        print('NotifyBannerTapped requires 9 args')
        sys.exit(1)
    pp.pprint(client.NotifyBannerTapped(args[0], args[1], eval(args[2]), args[3], args[4], eval(args[5]), args[6], eval(args[7]), eval(args[8]),))

elif cmd == 'NotifyBannerShowing':
    if len(args) != 9:
        print('NotifyBannerShowing requires 9 args')
        sys.exit(1)
    pp.pprint(client.NotifyBannerShowing(args[0], args[1], eval(args[2]), args[3], args[4], eval(args[5]), args[6], eval(args[7]), eval(args[8]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
