#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def QueryBeaconActions(self, deprecated_actionUrls, cacheTtl, touchActions, layerInfoAndActions, backgroundEnteringNotification, backgroundLeavingNotification, group, major, minor, effectiveRange, channelWhiteList, actionId, stayReportInterval, leaveThresholdTime, touchThreshold, cutoffThreshold):
        """
        Parameters:
         - deprecated_actionUrls
         - cacheTtl
         - touchActions
         - layerInfoAndActions
         - backgroundEnteringNotification
         - backgroundLeavingNotification
         - group
         - major
         - minor
         - effectiveRange
         - channelWhiteList
         - actionId
         - stayReportInterval
         - leaveThresholdTime
         - touchThreshold
         - cutoffThreshold

        """
        pass

    def NotifyBannerTapped(self, hwid, secureMessage, applicationType, applicationVersion, userSessionId, actionId, screen, bannerTappedAt, bannerTermAgreed):
        """
        Parameters:
         - hwid
         - secureMessage
         - applicationType
         - applicationVersion
         - userSessionId
         - actionId
         - screen
         - bannerTappedAt
         - bannerTermAgreed

        """
        pass

    def NotifyBannerShowing(self, hwid, secureMessage, applicationType, applicationVersion, userSessionId, actionId, screen, bannerStartedAt, bannerShownFor):
        """
        Parameters:
         - hwid
         - secureMessage
         - applicationType
         - applicationVersion
         - userSessionId
         - actionId
         - screen
         - bannerStartedAt
         - bannerShownFor

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def QueryBeaconActions(self, deprecated_actionUrls, cacheTtl, touchActions, layerInfoAndActions, backgroundEnteringNotification, backgroundLeavingNotification, group, major, minor, effectiveRange, channelWhiteList, actionId, stayReportInterval, leaveThresholdTime, touchThreshold, cutoffThreshold):
        """
        Parameters:
         - deprecated_actionUrls
         - cacheTtl
         - touchActions
         - layerInfoAndActions
         - backgroundEnteringNotification
         - backgroundLeavingNotification
         - group
         - major
         - minor
         - effectiveRange
         - channelWhiteList
         - actionId
         - stayReportInterval
         - leaveThresholdTime
         - touchThreshold
         - cutoffThreshold

        """
        self.send_QueryBeaconActions(deprecated_actionUrls, cacheTtl, touchActions, layerInfoAndActions, backgroundEnteringNotification, backgroundLeavingNotification, group, major, minor, effectiveRange, channelWhiteList, actionId, stayReportInterval, leaveThresholdTime, touchThreshold, cutoffThreshold)
        return self.recv_QueryBeaconActions()

    def send_QueryBeaconActions(self, deprecated_actionUrls, cacheTtl, touchActions, layerInfoAndActions, backgroundEnteringNotification, backgroundLeavingNotification, group, major, minor, effectiveRange, channelWhiteList, actionId, stayReportInterval, leaveThresholdTime, touchThreshold, cutoffThreshold):
        self._oprot.writeMessageBegin('QueryBeaconActions', TMessageType.CALL, self._seqid)
        args = QueryBeaconActions_args()
        args.deprecated_actionUrls = deprecated_actionUrls
        args.cacheTtl = cacheTtl
        args.touchActions = touchActions
        args.layerInfoAndActions = layerInfoAndActions
        args.backgroundEnteringNotification = backgroundEnteringNotification
        args.backgroundLeavingNotification = backgroundLeavingNotification
        args.group = group
        args.major = major
        args.minor = minor
        args.effectiveRange = effectiveRange
        args.channelWhiteList = channelWhiteList
        args.actionId = actionId
        args.stayReportInterval = stayReportInterval
        args.leaveThresholdTime = leaveThresholdTime
        args.touchThreshold = touchThreshold
        args.cutoffThreshold = cutoffThreshold
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_QueryBeaconActions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = QueryBeaconActions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "QueryBeaconActions failed: unknown result")

    def NotifyBannerTapped(self, hwid, secureMessage, applicationType, applicationVersion, userSessionId, actionId, screen, bannerTappedAt, bannerTermAgreed):
        """
        Parameters:
         - hwid
         - secureMessage
         - applicationType
         - applicationVersion
         - userSessionId
         - actionId
         - screen
         - bannerTappedAt
         - bannerTermAgreed

        """
        self.send_NotifyBannerTapped(hwid, secureMessage, applicationType, applicationVersion, userSessionId, actionId, screen, bannerTappedAt, bannerTermAgreed)
        self.recv_NotifyBannerTapped()

    def send_NotifyBannerTapped(self, hwid, secureMessage, applicationType, applicationVersion, userSessionId, actionId, screen, bannerTappedAt, bannerTermAgreed):
        self._oprot.writeMessageBegin('NotifyBannerTapped', TMessageType.CALL, self._seqid)
        args = NotifyBannerTapped_args()
        args.hwid = hwid
        args.secureMessage = secureMessage
        args.applicationType = applicationType
        args.applicationVersion = applicationVersion
        args.userSessionId = userSessionId
        args.actionId = actionId
        args.screen = screen
        args.bannerTappedAt = bannerTappedAt
        args.bannerTermAgreed = bannerTermAgreed
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_NotifyBannerTapped(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = NotifyBannerTapped_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def NotifyBannerShowing(self, hwid, secureMessage, applicationType, applicationVersion, userSessionId, actionId, screen, bannerStartedAt, bannerShownFor):
        """
        Parameters:
         - hwid
         - secureMessage
         - applicationType
         - applicationVersion
         - userSessionId
         - actionId
         - screen
         - bannerStartedAt
         - bannerShownFor

        """
        self.send_NotifyBannerShowing(hwid, secureMessage, applicationType, applicationVersion, userSessionId, actionId, screen, bannerStartedAt, bannerShownFor)
        self.recv_NotifyBannerShowing()

    def send_NotifyBannerShowing(self, hwid, secureMessage, applicationType, applicationVersion, userSessionId, actionId, screen, bannerStartedAt, bannerShownFor):
        self._oprot.writeMessageBegin('NotifyBannerShowing', TMessageType.CALL, self._seqid)
        args = NotifyBannerShowing_args()
        args.hwid = hwid
        args.secureMessage = secureMessage
        args.applicationType = applicationType
        args.applicationVersion = applicationVersion
        args.userSessionId = userSessionId
        args.actionId = actionId
        args.screen = screen
        args.bannerStartedAt = bannerStartedAt
        args.bannerShownFor = bannerShownFor
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_NotifyBannerShowing(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = NotifyBannerShowing_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["QueryBeaconActions"] = Processor.process_QueryBeaconActions
        self._processMap["NotifyBannerTapped"] = Processor.process_NotifyBannerTapped
        self._processMap["NotifyBannerShowing"] = Processor.process_NotifyBannerShowing
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_QueryBeaconActions(self, seqid, iprot, oprot):
        args = QueryBeaconActions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = QueryBeaconActions_result()
        try:
            result.success = self._handler.QueryBeaconActions(args.deprecated_actionUrls, args.cacheTtl, args.touchActions, args.layerInfoAndActions, args.backgroundEnteringNotification, args.backgroundLeavingNotification, args.group, args.major, args.minor, args.effectiveRange, args.channelWhiteList, args.actionId, args.stayReportInterval, args.leaveThresholdTime, args.touchThreshold, args.cutoffThreshold)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TalkException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("QueryBeaconActions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_NotifyBannerTapped(self, seqid, iprot, oprot):
        args = NotifyBannerTapped_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = NotifyBannerTapped_result()
        try:
            self._handler.NotifyBannerTapped(args.hwid, args.secureMessage, args.applicationType, args.applicationVersion, args.userSessionId, args.actionId, args.screen, args.bannerTappedAt, args.bannerTermAgreed)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TalkException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("NotifyBannerTapped", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_NotifyBannerShowing(self, seqid, iprot, oprot):
        args = NotifyBannerShowing_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = NotifyBannerShowing_result()
        try:
            self._handler.NotifyBannerShowing(args.hwid, args.secureMessage, args.applicationType, args.applicationVersion, args.userSessionId, args.actionId, args.screen, args.bannerStartedAt, args.bannerShownFor)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TalkException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("NotifyBannerShowing", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class QueryBeaconActions_args(object):
    """
    Attributes:
     - deprecated_actionUrls
     - cacheTtl
     - touchActions
     - layerInfoAndActions
     - backgroundEnteringNotification
     - backgroundLeavingNotification
     - group
     - major
     - minor
     - effectiveRange
     - channelWhiteList
     - actionId
     - stayReportInterval
     - leaveThresholdTime
     - touchThreshold
     - cutoffThreshold

    """


    def __init__(self, deprecated_actionUrls=None, cacheTtl=None, touchActions=None, layerInfoAndActions=None, backgroundEnteringNotification=None, backgroundLeavingNotification=None, group=None, major=None, minor=None, effectiveRange=None, channelWhiteList=None, actionId=None, stayReportInterval=None, leaveThresholdTime=None, touchThreshold=None, cutoffThreshold=None,):
        self.deprecated_actionUrls = deprecated_actionUrls
        self.cacheTtl = cacheTtl
        self.touchActions = touchActions
        self.layerInfoAndActions = layerInfoAndActions
        self.backgroundEnteringNotification = backgroundEnteringNotification
        self.backgroundLeavingNotification = backgroundLeavingNotification
        self.group = group
        self.major = major
        self.minor = minor
        self.effectiveRange = effectiveRange
        self.channelWhiteList = channelWhiteList
        self.actionId = actionId
        self.stayReportInterval = stayReportInterval
        self.leaveThresholdTime = leaveThresholdTime
        self.touchThreshold = touchThreshold
        self.cutoffThreshold = cutoffThreshold

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.LIST:
                    self.deprecated_actionUrls = []
                    (_etype68, _size65) = iprot.readListBegin()
                    for _i69 in range(_size65):
                        _elem70 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.deprecated_actionUrls.append(_elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cacheTtl = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.touchActions = BeaconTouchActions()
                    self.touchActions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.layerInfoAndActions = BeaconLayerInfoAndActions()
                    self.layerInfoAndActions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.backgroundEnteringNotification = BeaconBackgroundNotification()
                    self.backgroundEnteringNotification.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.backgroundLeavingNotification = BeaconBackgroundNotification()
                    self.backgroundLeavingNotification.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.major = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.minor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.effectiveRange = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.channelWhiteList = []
                    (_etype74, _size71) = iprot.readListBegin()
                    for _i75 in range(_size71):
                        _elem76 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.channelWhiteList.append(_elem76)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.actionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.stayReportInterval = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.leaveThresholdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.touchThreshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I16:
                    self.cutoffThreshold = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QueryBeaconActions_args')
        if self.deprecated_actionUrls is not None:
            oprot.writeFieldBegin('deprecated_actionUrls', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.deprecated_actionUrls))
            for iter77 in self.deprecated_actionUrls:
                oprot.writeString(iter77.encode('utf-8') if sys.version_info[0] == 2 else iter77)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cacheTtl is not None:
            oprot.writeFieldBegin('cacheTtl', TType.I64, 3)
            oprot.writeI64(self.cacheTtl)
            oprot.writeFieldEnd()
        if self.touchActions is not None:
            oprot.writeFieldBegin('touchActions', TType.STRUCT, 4)
            self.touchActions.write(oprot)
            oprot.writeFieldEnd()
        if self.layerInfoAndActions is not None:
            oprot.writeFieldBegin('layerInfoAndActions', TType.STRUCT, 5)
            self.layerInfoAndActions.write(oprot)
            oprot.writeFieldEnd()
        if self.backgroundEnteringNotification is not None:
            oprot.writeFieldBegin('backgroundEnteringNotification', TType.STRUCT, 6)
            self.backgroundEnteringNotification.write(oprot)
            oprot.writeFieldEnd()
        if self.backgroundLeavingNotification is not None:
            oprot.writeFieldBegin('backgroundLeavingNotification', TType.STRUCT, 7)
            self.backgroundLeavingNotification.write(oprot)
            oprot.writeFieldEnd()
        if self.group is not None:
            oprot.writeFieldBegin('group', TType.STRING, 8)
            oprot.writeString(self.group.encode('utf-8') if sys.version_info[0] == 2 else self.group)
            oprot.writeFieldEnd()
        if self.major is not None:
            oprot.writeFieldBegin('major', TType.STRING, 9)
            oprot.writeString(self.major.encode('utf-8') if sys.version_info[0] == 2 else self.major)
            oprot.writeFieldEnd()
        if self.minor is not None:
            oprot.writeFieldBegin('minor', TType.STRING, 10)
            oprot.writeString(self.minor.encode('utf-8') if sys.version_info[0] == 2 else self.minor)
            oprot.writeFieldEnd()
        if self.effectiveRange is not None:
            oprot.writeFieldBegin('effectiveRange', TType.DOUBLE, 11)
            oprot.writeDouble(self.effectiveRange)
            oprot.writeFieldEnd()
        if self.channelWhiteList is not None:
            oprot.writeFieldBegin('channelWhiteList', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.channelWhiteList))
            for iter78 in self.channelWhiteList:
                oprot.writeString(iter78.encode('utf-8') if sys.version_info[0] == 2 else iter78)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.actionId is not None:
            oprot.writeFieldBegin('actionId', TType.I64, 13)
            oprot.writeI64(self.actionId)
            oprot.writeFieldEnd()
        if self.stayReportInterval is not None:
            oprot.writeFieldBegin('stayReportInterval', TType.I64, 14)
            oprot.writeI64(self.stayReportInterval)
            oprot.writeFieldEnd()
        if self.leaveThresholdTime is not None:
            oprot.writeFieldBegin('leaveThresholdTime', TType.I64, 15)
            oprot.writeI64(self.leaveThresholdTime)
            oprot.writeFieldEnd()
        if self.touchThreshold is not None:
            oprot.writeFieldBegin('touchThreshold', TType.DOUBLE, 17)
            oprot.writeDouble(self.touchThreshold)
            oprot.writeFieldEnd()
        if self.cutoffThreshold is not None:
            oprot.writeFieldBegin('cutoffThreshold', TType.I16, 18)
            oprot.writeI16(self.cutoffThreshold)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(QueryBeaconActions_args)
QueryBeaconActions_args.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.LIST, 'deprecated_actionUrls', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I64, 'cacheTtl', None, None, ),  # 3
    (4, TType.STRUCT, 'touchActions', [BeaconTouchActions, None], None, ),  # 4
    (5, TType.STRUCT, 'layerInfoAndActions', [BeaconLayerInfoAndActions, None], None, ),  # 5
    (6, TType.STRUCT, 'backgroundEnteringNotification', [BeaconBackgroundNotification, None], None, ),  # 6
    (7, TType.STRUCT, 'backgroundLeavingNotification', [BeaconBackgroundNotification, None], None, ),  # 7
    (8, TType.STRING, 'group', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'major', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'minor', 'UTF8', None, ),  # 10
    (11, TType.DOUBLE, 'effectiveRange', None, None, ),  # 11
    (12, TType.LIST, 'channelWhiteList', (TType.STRING, 'UTF8', False), None, ),  # 12
    (13, TType.I64, 'actionId', None, None, ),  # 13
    (14, TType.I64, 'stayReportInterval', None, None, ),  # 14
    (15, TType.I64, 'leaveThresholdTime', None, None, ),  # 15
    None,  # 16
    (17, TType.DOUBLE, 'touchThreshold', None, None, ),  # 17
    (18, TType.I16, 'cutoffThreshold', None, None, ),  # 18
)


class QueryBeaconActions_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = BeaconQueryResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QueryBeaconActions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(QueryBeaconActions_result)
QueryBeaconActions_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [BeaconQueryResponse, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [TalkException, None], None, ),  # 1
)


class NotifyBannerTapped_args(object):
    """
    Attributes:
     - hwid
     - secureMessage
     - applicationType
     - applicationVersion
     - userSessionId
     - actionId
     - screen
     - bannerTappedAt
     - bannerTermAgreed

    """


    def __init__(self, hwid=None, secureMessage=None, applicationType=None, applicationVersion=None, userSessionId=None, actionId=None, screen=None, bannerTappedAt=None, bannerTermAgreed=None,):
        self.hwid = hwid
        self.secureMessage = secureMessage
        self.applicationType = applicationType
        self.applicationVersion = applicationVersion
        self.userSessionId = userSessionId
        self.actionId = actionId
        self.screen = screen
        self.bannerTappedAt = bannerTappedAt
        self.bannerTermAgreed = bannerTermAgreed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hwid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.secureMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.applicationType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.applicationVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.actionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.screen = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.bannerTappedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.bannerTermAgreed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NotifyBannerTapped_args')
        if self.hwid is not None:
            oprot.writeFieldBegin('hwid', TType.STRING, 1)
            oprot.writeString(self.hwid.encode('utf-8') if sys.version_info[0] == 2 else self.hwid)
            oprot.writeFieldEnd()
        if self.secureMessage is not None:
            oprot.writeFieldBegin('secureMessage', TType.STRING, 2)
            oprot.writeString(self.secureMessage.encode('utf-8') if sys.version_info[0] == 2 else self.secureMessage)
            oprot.writeFieldEnd()
        if self.applicationType is not None:
            oprot.writeFieldBegin('applicationType', TType.I32, 3)
            oprot.writeI32(self.applicationType)
            oprot.writeFieldEnd()
        if self.applicationVersion is not None:
            oprot.writeFieldBegin('applicationVersion', TType.STRING, 4)
            oprot.writeString(self.applicationVersion.encode('utf-8') if sys.version_info[0] == 2 else self.applicationVersion)
            oprot.writeFieldEnd()
        if self.userSessionId is not None:
            oprot.writeFieldBegin('userSessionId', TType.STRING, 5)
            oprot.writeString(self.userSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.userSessionId)
            oprot.writeFieldEnd()
        if self.actionId is not None:
            oprot.writeFieldBegin('actionId', TType.I64, 6)
            oprot.writeI64(self.actionId)
            oprot.writeFieldEnd()
        if self.screen is not None:
            oprot.writeFieldBegin('screen', TType.STRING, 7)
            oprot.writeString(self.screen.encode('utf-8') if sys.version_info[0] == 2 else self.screen)
            oprot.writeFieldEnd()
        if self.bannerTappedAt is not None:
            oprot.writeFieldBegin('bannerTappedAt', TType.I64, 8)
            oprot.writeI64(self.bannerTappedAt)
            oprot.writeFieldEnd()
        if self.bannerTermAgreed is not None:
            oprot.writeFieldBegin('bannerTermAgreed', TType.BOOL, 9)
            oprot.writeBool(self.bannerTermAgreed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NotifyBannerTapped_args)
NotifyBannerTapped_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hwid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'secureMessage', 'UTF8', None, ),  # 2
    (3, TType.I32, 'applicationType', None, None, ),  # 3
    (4, TType.STRING, 'applicationVersion', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'userSessionId', 'UTF8', None, ),  # 5
    (6, TType.I64, 'actionId', None, None, ),  # 6
    (7, TType.STRING, 'screen', 'UTF8', None, ),  # 7
    (8, TType.I64, 'bannerTappedAt', None, None, ),  # 8
    (9, TType.BOOL, 'bannerTermAgreed', None, None, ),  # 9
)


class NotifyBannerTapped_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NotifyBannerTapped_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NotifyBannerTapped_result)
NotifyBannerTapped_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [TalkException, None], None, ),  # 1
)


class NotifyBannerShowing_args(object):
    """
    Attributes:
     - hwid
     - secureMessage
     - applicationType
     - applicationVersion
     - userSessionId
     - actionId
     - screen
     - bannerStartedAt
     - bannerShownFor

    """


    def __init__(self, hwid=None, secureMessage=None, applicationType=None, applicationVersion=None, userSessionId=None, actionId=None, screen=None, bannerStartedAt=None, bannerShownFor=None,):
        self.hwid = hwid
        self.secureMessage = secureMessage
        self.applicationType = applicationType
        self.applicationVersion = applicationVersion
        self.userSessionId = userSessionId
        self.actionId = actionId
        self.screen = screen
        self.bannerStartedAt = bannerStartedAt
        self.bannerShownFor = bannerShownFor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hwid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.secureMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.applicationType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.applicationVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.actionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.screen = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.bannerStartedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.bannerShownFor = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NotifyBannerShowing_args')
        if self.hwid is not None:
            oprot.writeFieldBegin('hwid', TType.STRING, 1)
            oprot.writeString(self.hwid.encode('utf-8') if sys.version_info[0] == 2 else self.hwid)
            oprot.writeFieldEnd()
        if self.secureMessage is not None:
            oprot.writeFieldBegin('secureMessage', TType.STRING, 2)
            oprot.writeString(self.secureMessage.encode('utf-8') if sys.version_info[0] == 2 else self.secureMessage)
            oprot.writeFieldEnd()
        if self.applicationType is not None:
            oprot.writeFieldBegin('applicationType', TType.I32, 3)
            oprot.writeI32(self.applicationType)
            oprot.writeFieldEnd()
        if self.applicationVersion is not None:
            oprot.writeFieldBegin('applicationVersion', TType.STRING, 4)
            oprot.writeString(self.applicationVersion.encode('utf-8') if sys.version_info[0] == 2 else self.applicationVersion)
            oprot.writeFieldEnd()
        if self.userSessionId is not None:
            oprot.writeFieldBegin('userSessionId', TType.STRING, 5)
            oprot.writeString(self.userSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.userSessionId)
            oprot.writeFieldEnd()
        if self.actionId is not None:
            oprot.writeFieldBegin('actionId', TType.I64, 6)
            oprot.writeI64(self.actionId)
            oprot.writeFieldEnd()
        if self.screen is not None:
            oprot.writeFieldBegin('screen', TType.STRING, 7)
            oprot.writeString(self.screen.encode('utf-8') if sys.version_info[0] == 2 else self.screen)
            oprot.writeFieldEnd()
        if self.bannerStartedAt is not None:
            oprot.writeFieldBegin('bannerStartedAt', TType.I64, 8)
            oprot.writeI64(self.bannerStartedAt)
            oprot.writeFieldEnd()
        if self.bannerShownFor is not None:
            oprot.writeFieldBegin('bannerShownFor', TType.I64, 9)
            oprot.writeI64(self.bannerShownFor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NotifyBannerShowing_args)
NotifyBannerShowing_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hwid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'secureMessage', 'UTF8', None, ),  # 2
    (3, TType.I32, 'applicationType', None, None, ),  # 3
    (4, TType.STRING, 'applicationVersion', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'userSessionId', 'UTF8', None, ),  # 5
    (6, TType.I64, 'actionId', None, None, ),  # 6
    (7, TType.STRING, 'screen', 'UTF8', None, ),  # 7
    (8, TType.I64, 'bannerStartedAt', None, None, ),  # 8
    (9, TType.I64, 'bannerShownFor', None, None, ),  # 9
)


class NotifyBannerShowing_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TalkException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NotifyBannerShowing_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NotifyBannerShowing_result)
NotifyBannerShowing_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [TalkException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

